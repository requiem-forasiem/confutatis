#from confutatis import User, utils
#extends confutatis.templates.MessageListing

#block head_extra_content
#filter CleanOutput

<script type="text/javascript">
<!--
#end filter
#filter Filter

var global_id = 0;
var value_array = Array();
var operator_array = Array();

var title_array = Array();
title_array["="] = "$_("Equal")";
title_array["!="] = "$_("Not equal")";
title_array["<"] = "$_("Lesser than")";
title_array[">"] = "$_("Greater than")";
title_array["<="] = "$_("Lesser or equal")";
title_array[">="] = "$_("Greater or equal")";
title_array["<>"] = "$_("Substring")";
title_array["<>*"] = "$_("Substring (case-insensitive)")";
title_array["~"] = "$_("Regular expression")";
title_array["~*"] = "$_("Regular expression (case-insensitive)")";


 var saved_state = [ "classification", "source", "target", "analyzer" ];

 var saved_forms = Array();
 saved_forms["classification"] = [ "default", "saved", "current" ];
 saved_forms["source"] = [ "default", "saved", "current" ];
 saved_forms["target"] = [ "default", "saved", "current" ];
 saved_forms["analyzer"] = [ "default", "saved", "current" ];

function cloneForm(form) {
        var clone = \$(form).clone();
        var selvals = [];

        \$(form).filter("select").each(function() {
                selvals.push(\$(this).val());
        });

        \$(clone).filter("select").each(function() {
                \$(this).val(selvals.shift());
        });

        return clone;
}


function input_equal(a, b) {
        if ( a.type == "button" && b.type == "button" )
                return true;

        if ( a.name != b.name )
                return false;

        if ( a.checked != b.checked )
                return false;

        if ( a.selected != b.selected )
                return false;

        if ( a.value != b.value )
                return false;

        return true;
}

function Equals(a, b) {
  if( ! a || ! b )
        return false;

  if ( a.length != b.length )
        return false;

  for ( var k = 0; k < a.length; k++ ) {
        r = input_equal(a[k], b[k]);
        if ( r == false )
                return false;
  }

  return true;
}


function get_next_state(id, cstate) {
        var nextstate = null;
        var selector = "#" + id + " :input";

        if ( cstate == "current" ) {
                if ( saved_forms[id]["saved"] && ! Equals(\$(selector), saved_forms[id]["saved"]) )
                        nextstate = "saved";

                else if ( saved_forms[id]["default"] && ! Equals(\$(selector), saved_forms[id]["default"]) )
                        nextstate = "default";
        }

        else if ( cstate == "saved" ) {
                if ( saved_forms[id]["default"] && ! Equals(\$(selector), saved_forms[id]["default"]) )
                        nextstate = "default";

                else if ( saved_forms[id]["current"] && ! Equals(\$(selector), saved_forms[id]["current"]) )
                        nextstate = "current";
        }

        else if ( cstate == "default" ) {
                if ( saved_forms[id]["current"] && ! Equals(\$(selector), saved_forms[id]["current"]) )
                        nextstate = "current";

                else if ( saved_forms[id]["saved"] && ! Equals(\$(selector), saved_forms[id]["saved"]) )
                        nextstate = "saved";
        }

        return nextstate;
}


function createSelectFromArray(varray, sclass, name_attr, selected) {
        var elem;
        var select = document.createElement("select");

        for (elem in varray) {
                option = document.createElement("option")
                option.setAttribute("value", varray[elem]);

                if ( title_array[varray[elem]] )
                        option.setAttribute("title", title_array[varray[elem]]);

                if ( varray[elem] == selected )
                        option.setAttribute("selected", "selected");

                option.appendChild(document.createTextNode(varray[elem]))
                select.appendChild(option)
        }

        select.setAttribute("name", name_attr);
        select.setAttribute("class", sclass);

        return select;
}



###
### Generate special classification function
###
#for $state, $type, $severity, $completion in ("current", $alert.type, $alert.assessment.impact.severity, $alert.assessment.impact.completion), ("saved", $alert.type_saved, $alert.assessment.impact.severity_saved, $alert.assessment.impact.completion_saved), ("default", $alert.type_default, $alert.assessment.impact.severity_default, $alert.assessment.impact.completion_default),

function classification_special_${state}() {
 #for $path in "alert.create_time", "alert.correlation_alert.name", "alert.overflow_alert.program", "alert.tool_alert.name"
  #if path in $type
   \$("input[value='${path}']").attr("checked", "checked");
  #else
   \$("input[value='${path}']").removeAttr("checked");
  #end if
 #end for

 var input = \$("#classification input[name='alert.assessment.impact.severity']");

 #for $item in $N_("info"), $N_("low"), $N_("medium"), $N_("high"), $N_("n/a")
  #if $item in $severity
  \$(input).filter("[value='$item']").attr("checked", "checked");
  #else
  \$(input).filter("[value='$item']").removeAttr("checked");
  #end if
 #end for

 input = \$("#classification input[name='alert.assessment.impact.completion']");
 #for item in $N_("succeeded"), $N_("failed"), $N_("n/a")
  #if item in $completion
  \$(input).filter("[value='$item']").attr("checked", "checked");
  #else
  \$(input).filter("[value='$item']").removeAttr("checked");
  #end if
 #end for
}

#end for



#for $type, $table_current, $table_saved, $table_aggreg_current, $table_aggreg_saved, $table_aggreg_default in ("classification", $classification, $classification_saved, $aggregated_classification, $aggregated_classification_saved, $aggregated_classification_default), ("source", $source, $source_saved, $aggregated_source, $aggregated_source_saved, $aggregated_source_default), ("target", $target, $target_saved, $aggregated_target, $aggregated_target_saved, $aggregated_target_default), ("analyzer", $analyzer, $analyzer_saved, $aggregated_analyzer, $aggregated_analyzer_saved, $aggregated_analyzer_default)

function ${type}_filters_set_from_string(state) {
        if ( state == "saved" )
                ${type}_set_saved();

        else if ( state == "default" )
                ${type}_set_default()

        else if ( state == "current" )
                ${type}_set_current();
}

function ${type}_zero() {
 var filter_table = \$("#${type} table.filter_table > tbody");
 filter_table.find("tr:not(':first')").remove()
 filter_table.find("input[type=text]").val("")
 \$("#${type} table.aggregation_table tr:not(':first')").remove()

 ## reset to non expert mode.
 if ( filter_table.find(".td_container_path").children().is(":visible") )
   filter_table.find(".expert_mode").click();
}

function ${type}_set_default() {
 ${type}_zero();
 var table = \$("#${type} table.aggregation_table > tbody");

  #if $type == "classification"
   ${type}_special_default();
  #end if


  ### Aggregation stuff
  #set $cnt = 0
  #for $path in $table_aggreg_default

   #if $cnt > 0
    table.find("tr:last a.append_entry").trigger('click');
   #end if
   #set $cnt += 1

   table.find("tr:last .popup_input_field option[value='$path']").attr("selected", "selected");
  #end for
}

#for $state, $table, $table_aggreg in ("current", $table_current, $table_aggreg_current), ("saved", $table_saved, $table_aggreg_saved)
function ${type}_set_${state}() {
  ${type}_zero();
  var table = \$("#${type} table.filter_table > tbody");
  var agtable = \$("#${type} table.aggregation_table > tbody");

  #if $type == "classification"
   ${type}_special_${state}();
  #end if

  #set $cnt = 0
  #set $got_append = 0

  #for $path, $operator, $value in $table

   #if $cnt > 0
    #set $got_append = 1
    table.find("tr:last a.append_entry").trigger('click');
   #end if
   #set $cnt += 1

  #if not $path
   #continue
  #end if

  table.find("tr:last .popup_input_field").attr("value", "$utils.escape_attribute($value)");
  table.find("tr:last .popup_input_field option[value='$value']").attr("selected", "selected");

  #if $path != "__all__"
   table.find("tr:last .popup_select_field option[value='$path']").attr("selected", "selected");

   ## the option might not exist at this time, so we have to explicitly create it (otherwise,
   ## using Equals() later on will always return false since there is no operator selected).
   ## The other fields will be populated on the .trigger("change").
   table.find("tr:last .popup_operator_select").html("<option value='$operator' selected='selected' />");

   #if $got_append == 0
    table.find("tr:last .expert_mode").trigger("click");
   #else
    table.find("tr:last .popup_select_field").trigger("change");
   #end if
  #else
   table.find("tr:last .popup_select_field").hide();
   table.find("tr:last .popup_select_field").attr("disabled", "disabled");
   table.find("tr:last .popup_select_field").trigger("change");
  #end if
  #end for

### Aggregation stuff
  #set $cnt = 0
  #for $path in $table_aggreg

   #if $cnt > 0
    agtable.find("tr:last a.append_entry").trigger('click');
   #end if
   #set $cnt += 1

   agtable.find("tr:last .popup_input_field option[value='$path']").attr("selected", "selected");
  #end for
 }
#end for
#end for



\$(document).ready(function() {
 \$(".expert_mode").live("click", function() {
        var tr = \$(this).parent().parent();
        var td_container_path = \$(tr).children(".td_container_path");
        var td_container_operator = \$(tr).children(".td_container_operator");

        if ( ! \$(td_container_path).children().is(":visible") ) {
                \$(this).text("simple");
                \$(this).parent().parent().children(".td_container_operator").children().show()
                \$(td_container_path).children("select").show()
                \$(td_container_path).children("input").attr("disabled", "disabled")
                \$(td_container_path).children("select").removeAttr("disabled")
                \$(td_container_operator).children("select").removeAttr("disabled");
        } else {
                \$(this).text("advanced");
                \$(td_container_path).children().hide()
                \$(this).parent().parent().children(".td_container_operator").children().hide()
                \$(td_container_path).children("input").removeAttr("disabled")
                \$(td_container_path).children("select").attr("disabled", "disabled")
                \$(td_container_operator).children("select").attr("disabled", "disabled");
        }

        ## This is required so that the input is changed (from/to enum) when required.
        \$(td_container_path).children("select").trigger("change");
});

 \$(".remove_entry").live("click", function() {
        \$(this).parent().parent().remove();
 });

 \$(".append_entry").live("click", function() {
   var tr = cloneForm(\$(this).parent().parent());
   var select = \$(tr).children("td.td_container_path").children();
   var div_id = \$(this).parent().parent().parent().parent().parent().parent().parent().parent().parent().attr("id");

   if ( \$(this).parent().parent().parent().parent().is("table.aggregation_table") )
        \$(select).attr("name", "aggregated_" + div_id);

   else {
        global_id += 1;

        var input = \$(tr).children("td.td_container_value").children();
        \$(tr).children("td.td_container_operator").children().attr("name", div_id + "_operator_" + global_id);
        \$(input).attr("name", div_id + "_value_" + global_id);
        \$(input).attr("value", "");
        \$(input).find("option[value='none']").attr("selected", "selected");
        \$(select).attr("name", div_id + "_object_" + global_id);
   }

   \$(this).parents(".inline_filter").after(tr);
   \$(select).trigger("change");
   \$(tr).children("td.td_container_remove").html("<a class=\"remove_entry\">-</a>");
 });


 \$(".popup_select_field").live("change", function() {
          var td = \$(this).parent();
          var str = \$(this, "> option:selected").attr("value");
          var input = \$(td).siblings(".td_container_value").children();

          // do not use visible here, this is called before the parent element is visible
          var advanced_mode = \$(this).css("display") != "none";

          if ( operator_array[str] && advanced_mode ) {
                var old_select = \$(td).siblings(".td_container_operator").children();
                var old_value = \$(old_select).children(":selected").attr("value");

                select = createSelectFromArray(operator_array[str], "popup_operator_select", \$(old_select).attr("name"), old_value);
                \$(old_select).replaceWith(select);
          }

          if ( value_array[str] && advanced_mode ) {
                  select = createSelectFromArray(value_array[str], "popup_input_field", \$(input).attr("name"), \$(input).attr("value"));
                  \$(input).replaceWith(select);
          }

          else {
                var n = document.createElement("input");
                n.setAttribute("type", "text");
                n.setAttribute("name", \$(input).attr("name"));
                n.setAttribute("class", "popup_input_field");

                if ( \$(input).attr("type") != "select-one" )
                        n.setAttribute("value", \$(input).attr("value"));

                if ( old_value == '!' )
                        n.setAttribute("disabled", "disabled");

                \$(input).replaceWith(n);
          }
 });



 #for $type in "classification", "source", "target", "analyzer"

 ${type}_set_saved();
 saved_forms["${type}"]["saved"] = cloneForm(\$("#${type} :input"));

 ${type}_set_default();
 saved_forms["${type}"]["default"] = cloneForm(\$("#${type} :input"));

 ${type}_set_current();
 var form = \$("#${type} :input");
 saved_forms["${type}"]["current"] = cloneForm(form);

 if ( Equals(saved_forms["${type}"]["default"], saved_forms["${type}"]["saved"]) )
        saved_forms["${type}"]["saved"] = null;

 if ( Equals(saved_forms["${type}"]["current"], saved_forms["${type}"]["default"]) )
        saved_forms["${type}"]["current"] = null;

 if ( Equals(saved_forms["${type}"]["current"], saved_forms["${type}"]["saved"]) )
        saved_forms["${type}"]["current"] = null;

 ## Set the current state
 if ( Equals(form, saved_forms["${type}"]["default"]) )
        saved_state["$type"] = "default";

 else if ( Equals(form, saved_forms["$type"]["saved"]) )
        saved_state["$type"] = "saved";

 else if ( Equals(form, saved_forms["$type"]["current"]) )
        saved_state["$type"] = "current";

 \$("#${type} input.reset_filter").val("Reset to " + get_next_state("$type", saved_state["$type"]));

 #end for


\$("input.reset_filter").click(function() {
        var div_id = \$(this).parent().parent().parent().parent().parent().parent().parent().parent().parent().attr("id");

        saved_state[div_id] = \$(this).val().substr(9);

        #for $t in "classification", "source", "target", "analyzer"
                if ( div_id == "$t" )
                        ${t}_filters_set_from_string(saved_state[div_id]);
        #end for

        \$(this).val("Reset to " + get_next_state(div_id, saved_state[div_id]));
 });

\$(".popup_operator_select").live("change", function() {
        var str = \$(this, "> option:selected").attr("value");
        if ( str == "!" )
                \$(this).parent().next().children(".popup_input_field").attr("disabled", "disabled");
        else
                \$(this).parent().next().children(".popup_input_field").removeAttr("disabled");
});

});

//--></script>

#end filter
#end block

#def define_inline_filter($obname, $preselect)
      <table class="inline_filter_content filter_table">
       <tr class="inline_filter">
        <th>$_('Filter on') [<a class="expert_mode">advanced</a>]:</th>
        <td class="td_container_path">
         <input type="hidden" name="${obname}_object_0" value="__all__" />
         <select style="display:none;" disabled="disabled" class="popup_select_field" name="${obname}_object_0">
          #for $name, $path, $oplist, $value in $all_filters[$obname]

           #if $value or $oplist
           <script type="text/javascript">
            #if $value
            value_array["$path"] = $value;
            #end if
            #if $oplist
             operator_array["$path"] = $oplist;
            #end if
           </script>
           #end if

           #if $path == None
            <option disabled="disabled" value="">$name</option>

           #elif $path == $preselect
            <option value="$path" selected="selected">$name</option>

           #else
            <option value="$path">$name</option>
           #end if
          #end for
         </select>
        </td>

        <td class="td_container_operator">
         <select style="display:none;" class="popup_operator_select" name="${obname}_operator_0" />
        </td>

        <td class="td_container_value">
         <input class="popup_input_field" type="text" name="${obname}_value_0" />
        </td>

        <td class="td_container_remove">&nbsp;</td>
        <td class="td_container_add"><a class="append_entry">+</a></td>
       </tr>
      </table>
#end def


#def define_inline_aggreg($obname)
      <table class="inline_filter_content aggregation_table">
       <tr class="inline_filter">
        <th>$_('Group entry by:')</th>
        <td class="td_container_path">
         <select class="popup_input_field" name="aggregated_${obname}">
          #for $name, $path, $unuseda, $unusedb in $all_aggregs[$obname]
           #if $path == None
            <option disabled="disabled" value="">$name</option>
           #else
            <option value="$path">$name</option>
           #end if
          #end for
         </select>
        </td>
        <td class="td_container_remove">&nbsp;</td>
        <td class="td_container_add"><a class="append_entry">+</a></td>
       </tr>
      </table>
#end def

#def filter_enabled_marker($type)
  <span class="filter_enabled_marker filter_popup_link">
   #if $type == 2
    [<a class="filter_enabled_marker">$_("filtered")</a>]
   #else
    [<a style="color: gray;">$_("filtered")</a>]
   #end if
  </span>
#end def

#def filter_reset()
<tr><td>
    <table class="inline_filter_content">
     <tr class="inline_filter">
      <td colspan="3">&nbsp;</td>
      <td>
       <input type="submit" value="Apply" />
       <input type="button" class="reset_filter" value="Reset" />
      </td>
     </tr>
    </table>
</td></tr>
#end def

#block message_fields_header
<thead>
 <tr style="height: 20px;">
  <th class="filter_popup">
   <a class="filter_popup_link">$_("Classification")</a>
    #if $classification_filtered
     $filter_enabled_marker($classification_filtered)
    #end if
   <div id="classification">
    <table>
     <tr><td>$define_inline_filter("classification", "alert.classification.text")</td></tr>
     <tr><td>$define_inline_aggreg("classification")</td></tr>
     <tr><td><table class="inline_filter_content">
       <tr>
        <th>$_("Type:")</th>
        <td>&nbsp;</td>
        #if $correlation_alert_view
         #set $disabled="disabled=\"disabled\""
        #else
         #set $disabled=""
        #end if

        #for name, path in (($N_("Alert"), "alert.create_time"), ($N_("CorrelationAlert"), "alert.correlation_alert.name"),
                          ($N_("OverflowAlert"), "alert.overflow_alert.program"), ($N_("ToolAlert"), "alert.tool_alert.name"))
         #if path in $alert.type
          #set $checked = "checked='checked'"
         #else
          #set $checked = ""
         #end if

        <td>$_($name)<input class="checkbox" $disabled type="checkbox" name="alert.type" value="$path" $checked /></td>
        #end for
       </tr>

       <tr>
        <th>$_("Severity:")</th>
        #for $item in $N_("info"), $N_("low"), $N_("medium"), $N_("high"), $N_("n/a")
        <td>$_($item)<input class="checkbox" type="checkbox" name="alert.assessment.impact.severity" value="$item" /></td>
        #end for
       </tr>

       <tr>
        <th>$_("Completion:")</th>
        <td colspan="2">&nbsp;</td>

        #for item in $N_("succeeded"), $N_("failed"), $N_("n/a")
        <td>$_($item)<input class="checkbox" type="checkbox" name="alert.assessment.impact.completion" value="$item" /></td>
        #end for
       </tr>
      </table>
     </td></tr>
     $filter_reset()
    </table>
    </div>
  </th>

  <th class="filter_popup">
   <a class="filter_popup_link">$_("Source")</a>
   #if $source_filtered
     $filter_enabled_marker($source_filtered)
   #end if
   <div id="source">
    <table>
     <tr><td>$define_inline_filter("source", "alert.source.node.address.address")</td></tr>
     <tr><td>$define_inline_aggreg("source")</td></tr>
     $filter_reset()
    </table>
   </div>
  </th>

  <th class="filter_popup">
   <a class="filter_popup_link">$_("Target")</a>
   #if $target_filtered
     $filter_enabled_marker($target_filtered)
   #end if
   <div id="target">
    <table>
     <tr><td>$define_inline_filter("target", "alert.target.node.address.address")</td></tr>
     <tr><td>$define_inline_aggreg("target")</td></tr>
     $filter_reset()
    </table>
   </div>
  </th>

  <th class="filter_popup">
   <a class="filter_popup_link">$_("Analyzer")</a>
   #if $analyzer_filtered
     $filter_enabled_marker($analyzer_filtered)
   #end if
   <div id="analyzer">
    <table>
     <tr><td>$define_inline_filter("analyzer", "alert.analyzer.name")</td></tr>
     <tr><td>$define_inline_aggreg("analyzer")</td></tr>
     $filter_reset()
    </table>
   </div>
  </th>

  <td>$_("Time")</td>
</tr>
</thead>
#end block message_fields_header


#def writeInlineFilter(inline_filter, optval=None, cl="")
#if optval
#if $inline_filter.already_filtered:
<span class="$cl">$optval</span>#slurp
#else
<a class="$cl" href="$inline_filter.inline_filter">$optval</a>#slurp
#end if
#else
#if $inline_filter.already_filtered:
<span class="$cl">$inline_filter.value</span>#slurp
#else
<a class="$cl" href="$inline_filter.inline_filter">$inline_filter.value</a>#slurp
#end if
#end if
#end def

#def classificationWrite(info, text)
<a class="impact_severity_$info.severity.value popup_menu_toggle">$text</a><span class="popup_menu">
- <a href="$info.display">$_("See alert detail")</a><br />
- <a href="$info.classification.inline_filter">$_("Filter on this classification.text")</a><br />
</span>#slurp
#end def

#def writeService($hstr, $direction)
#if $direction.protocol.value
#set $protocol = $direction.protocol.value.upper()
#else
#set $protocol = ""
#end if
#if $direction.service.value != None#$hstr<a class="popup_menu_toggle">$unicode($direction.service.value)#end if
</a>
       <span class="popup_menu">
        #filter Filter - $writeInlineFilter($direction.service, $_("Filter on this port/protocol"))<br/> #end filter
        #if $direction.port.value
        - <a target="$confutatis.external_link_target" href="https://www.requiem-ids.com/port_details.php?port=$unicode($direction.port.value)&amp;protocol=$protocol">$_("Port/protocol information")</a>
        #else
        - <span>$_("Port/protocol information")</span>
        #end if
       </span>#slurp
#end def


#block message_fields
#filter CleanOutput

<td>
  #if $message.sub_alert_name
    <b>$message.sub_alert_type#slurp
    #if $message.sub_alert_display
      #set $string = $ngettext("alert", "alerts", $message.sub_alert_number)
      (<a href="$message.sub_alert_display">$message.sub_alert_number</a> $string)#slurp
    #end if
:</b> <i><a href="$message.sub_alert_link">$message.sub_alert_name</a></i><br/>#slurp
  #end if

  #if $message.aggregated and $message.aggregated_classifications_hidden > 0
    #set $string = $_("%(hidden)d of %(total)d alerts not shown...")
    <b>($unicode($string % { "hidden": $message.aggregated_classifications_hidden, "total": $message.aggregated_classifications_total })
    <a href="$message.aggregated_classifications_hidden_expand">$_("expand")</a>)</b>
    <br/>
  #end if

  #for $info in $message.infos
    #if $info.classification.value
     #set $text = $info.classification.value
    #else
     #set $text = "n/a"
    #end if

    #if $message.aggregated and (len($message.infos) > 1 or $info.count > 1)
      #if $info.count == 1
       $info.count x
        #filter Filter $classificationWrite($info, $text) #end filter
      #else
      <a href="$info.display">$info.count</a> x
       #if $info.classification.already_filtered
        <span class="impact_severity_$info.severity.value">$text</span>
       #else
        <a class="impact_severity_$info.severity.value" href="$info.classification.inline_filter">$text</a>
       #end if
      #end if
    #else
      #if $info.classification.already_filtered
      <a class="impact_severity_$info.severity.value" href="$info.display">$text</a>
      #else
       #filter Filter $classificationWrite($info, $text) #end filter
      #end if
    #end if

    #if $info.completion.value
      (#filter Filter$writeInlineFilter($info.completion, cl="impact_completion_" + $info.completion.value)#end filter#)
    #end if

    <br/>
    #set $sep = "("

#for url, name in $info.classification_references##slurp
$sep#if $url#<a class="popup_menu_toggle">$name.value</a>#else##filter Filter $writeInlineFilter($name)#end filter##end if##slurp
#set $sep = ", "
<span class="popup_menu">
 - #filter Filter $writeInlineFilter($name, $_("Filter on this reference"))#end filter#<br />
 - <a target="$confutatis.external_link_target" href="$url">Reference information</a>
</span>#end for##if $info.classification_references#)#end if

  #end for


</td>

#for $name, $direction, $hidden, $total, $expand in ($_("source"), $message.source, $message.aggregated_source_hidden, $message.aggregated_source_total, $message.aggregated_source_expand), ($_("target"), $message.target, $message.aggregated_target_hidden, $message.aggregated_target_total, $message.aggregated_target_expand)
<td>
#set $need_hr = 0

#if $hidden > 0
       #set $string = $_("%(hidden)d of %(total)d %(name)ss not shown...")
       <b>($unicode($string % { "hidden": $hidden, "total": $total, "name": $name })
       <a href="$expand">$_("expand")</a>)</b>
       <br/>
#end if

#for $direction in $direction
      #if $need_hr
        <hr style="border: 1px dashed #808080; margin-top: 3px; margin-bottom: 0px;" />
      #end if

      #set $need_hr = 1

      #for $address in $direction.addresses
       <a class="popup_menu_toggle">$address.hostname</a><span class="popup_menu">
         - #filter Filter $writeInlineFilter($address, $unicode($_("Filter on this %s") % ($name))) #end filter
         <br />

       #if $address.value and (not $address.category or $address.category in ("ipv4-addr", "ipv4-net", "ipv6-addr", "ipv6-net"))
         - <a target="$confutatis.external_link_target" href="https://www.requiem-ids.com/host_details.php?host=$address.value">$unicode($_("%s information") % ($name)).capitalize()</a><br />

          #for $cmdname, $link in $address.host_commands
         - <a href="$link">$cmdname</a><br />
          #end for
       #end if
       </span>#slurp
#filter Filter $writeService(":", $direction) #end filter
<br />
      #end for

      #if $len($direction.addresses) == 0
        #filter Filter $writeService("service:", $direction) #end filter
      #end if

     #set $cnt = 0
     #for $name, $value, $extra in $direction.listed_values
         #if $cnt > 0
          <br />
         #end if

         $name: #filter Filter $writeInlineFilter($value) #end filter
         #if $extra != None
          ($extra)
         #end if

         #set $cnt += 1
     #end for
#end for

</td>
#end for

<td>
  #for $sensor in $message.sensors
    #if $sensor.name.value
     #filter Filter$writeInlineFilter($sensor.name)#end filter
    #end if
    #if $sensor.node_name.value
      (#filter Filter$writeInlineFilter($sensor.node_name)#end filter#)
    #end if
    <br/>
  #end for
</td>
<td>
  #if $message.aggregated
    #if $message.time_min.value == $message.time_max.value
      $message.time_min.value
    #else
      $message.time_max.value -
      $message.time_min.value
    #end if
  #else
    $message.time.value
    #if $message.analyzer_time.value
      (sent at $message.analyzer_time.value)
    #end if
  #end if
</td>
#end filter
#filter Filter
#end filter
#end block message_fields


#block orderby_option
     <option value="time_desc" $timeline.time_desc_selected>By time (descending)</option>
     <option value="time_asc" $timeline.time_asc_selected>By time (ascending)</option>
     <option value="count_desc" $timeline.count_desc_selected>By count (descending)</option>
     <option value="count_asc" $timeline.count_asc_selected>By count (ascending)</option>
#end block


#block timeline_extra_content
#filter CleanOutput
<tr>
  <th id="filter_control_label">$_("Filter")</th>
  <td colspan="2">
   <select name="filter" size="1" class="filter_control_select">
    <option value="">&nbsp;</option>
  #for $fltr in $filters
    <option value="$fltr" #if $fltr == $current_filter# selected="selected" #end if#>$fltr</option>
  #end for
  </select>
 </td>
</tr>
#end filter
#filter Filter
#end filter
#end block
